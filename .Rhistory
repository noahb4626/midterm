}
# Example (3)
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
raschObj.y_test1 <- rep(0, 10)
probability(raschObj.a_test, raschObj.y_test, theta_test)
test_student <- new("Rasch")
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/MastFolderPoisson/poissonLikelihood")
package.skeleton()
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/midterm")
package.skeleton()
# Set up packages (1)
rm(list=ls()) # clear environment
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/midterm") # set working directory
devtools::create("easyRasch") # implement devtools
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/midterm")
package.skeleton()
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/midterm")
package.skeleton()
# Basic probability function (2)
probability <- function(raschObj, theta) {
# P_ij vector
num <- exp(theta - raschObj@a)
denom <- 1 + exp(theta - raschObj@a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj@y))
for(i in length(raschObj@y)) {
num2 <- exp(theta - raschObj@a[i])
denom2 <- 1 + exp(theta - raschObj@a[i])
if(raschObj@y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj@a_test <- 1:10
raschObj@y_test <- rep(0:1, 5)
probability(raschObj@a_test, raschObj@y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschOb.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj@a_test <- 1:10
raschObj@y_test <- rep(0:1, 5)
probability(raschObj@a_test, raschObj@y_test, theta_test)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObja, raschObjy, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschOb.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj@a_test <- 1:10
raschObj@y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
theta_test <- 0.
# Example (3)
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschOb.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
# Example (3)
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
print(length(raschObj.y))
for(i in length(raschObj.y)) {
print(length(raschObj.y))
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
print(length(raschObj.y))
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
print(length(raschObj.y))
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
val <- num2/denom2
print(val)
}
else {
val <- 1 - (num2/denom2)
print(val)
PQ <- c(PQ, val)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
PQ[i] <- num2/denom2
}
else {
PQ[i] <- 1 - (num2/denom2)
}
}
return(P_ij) # probability vector of answering questions correctly
return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
PQ[i] <- num2/denom2
}
else {
PQ[i] <- 1 - (num2/denom2)
}
}
return(c(P_ij, PQ)) # probability vector of answering questions correctly
#return(PQ)
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
PQ[i] <- num2/denom2
}
else {
PQ[i] <- 1 - (num2/denom2)
}
}
print(P_ij)
print(PQ) # probability vector of answering questions correctly
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
PQ[i] <- num2/denom2
}
else {
PQ[i] <- 1 - (num2/denom2)
}
}
return(P_ij)
return(PQ) # probability vector of answering questions correctly
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
# Basic probability function (2)
probability <- function(raschObj.a, raschObj.y, theta) {
# P_ij vector
num <- exp(theta - raschObj.a)
denom <- 1 + exp(theta - raschObj.a)
P_ij <- num/denom
# PQ vector
PQ <- c()
for(i in 1:length(raschObj.y)) {
num2 <- exp(theta - raschObj.a[i])
denom2 <- 1 + exp(theta - raschObj.a[i])
if(raschObj.y[i] == 1) {
PQ[i] <- num2/denom2
}
else {
PQ[i] <- 1 - (num2/denom2)
}
}
return(P_ij, PQ) # probability vector of answering questions correctly
}
theta_test <- 0.5
raschObj.a_test <- 1:10
raschObj.y_test <- rep(0:1, 5)
probability(raschObj.a_test, raschObj.y_test, theta_test)
test_student <- new("Rasch", name = "test", a <- 1:10, y <- rep(0:1, 5))
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
# Set up packages (1)
rm(list=ls()) # clear environment
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/midterm") # set working directory
devtools::create("easyRasch") # implement devtools
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
# Set up packages (1)
rm(list=ls()) # clear environment
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/midterm") # set working directory
devtools::create("easyRasch") # implement devtools
test_student <- new("Rasch", name = "test", a <- 1:10, y <- rep(0:1, 5))
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/midterm")
package.skeleton()
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
setwd("~/Documents/Github/midterm") # set working directory
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/PS5") # set working directory
devtools::create("integrateIt") # implement devtools
current.code <- as.package("integrateIt") # set integrateIt package as current code
# Set up packages (1)
rm(list=ls()) # clear environment
# Build skeleton (4)
setwd("/Users/noahbardash/Documents/Github/midterm")
# Load code (5)
current.code <- as.package("easyRasch") # set easyRasch package as current code
